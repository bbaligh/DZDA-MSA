# -*- coding: utf-8 -*-
"""Seq2Seq_NMT_DZDA_MSA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FOerejtO-7c-jgyh2CkaCN5JSn83M4V_
"""

#!pip install torchmetrics

import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F 
from torchmetrics.functional import sacre_bleu_score

from io import open
import unicodedata
import string
import re
import random
import os

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# # Dataset
# from google.colab import files
# 
# uploaded = files.upload()
# 
# for filename in uploaded.keys():
#     print(f"User uploaded file with name {filename}")

# Encoding text based on index. I.e one hot encoding for each unique word

# start and end of sentence tokens
SOS_token = 0
EOS_token = 1

class Lang:
    def __init__(self, name):
        self.name = name
        self.word2index = {}
        self.word2count = {}
        self.index2word = {0: "SOS", 1:"EOS"}
        self.n_words = 2  #current no of words is 2, SOS and EOS

    def addSentence(self, sentence):
        for w in sentence.split(" "):
            self.addWord(w)

    def addWord(self, w):
        self.word2index[w] = self.word2index.get(w, self.n_words)
        # self.word2count[w] = 1
        self.index2word[self.n_words] = w
        self.n_words += 1

# Convert unicode to ascii
def unicodeToAscii(s):
    return "".join(c for c in unicodedata.normalize('NFD', s)
    if unicodedata.category(c) != "Mn")


# lowercase, trim and remove non-letter characters
def normalizeString(s):
    #s = unicodeToAscii(s.lower().strip())
    #s = re.sub(r"([.!?])", r" \1", s)
    #s = re.sub(r"[^a-zA-Z.!?]+", r" ", s)
    s = re.sub(r"[^a-zA-Zا-ي.!?]+", r" ", s)
    return s

# split the file into lines, and then split the lines into pairs of languages
# The reverse flag is used for french to english translation

def getSeparetedData(lang1, lang2, reverse=False):
    
    text_file = open("%s-%s.txt"  % (lang1, lang2), "r", encoding='utf-8')
    lines = text_file.read().strip().split('\n')

    # split on tab
    pairs = [[normalizeString(s) for s in line.split('\t')] for line in lines]
    print(pairs[0:10])

    # if reverse is true, reverse the pairs
    if reverse:
        pairs = [list(reversed(p)) for p in pairs]
        in_lang = Lang(lang2)
        out_lang = Lang(lang1) 
    else:
        in_lang = Lang(lang1)
        out_lang = Lang(lang2)

    return in_lang, out_lang, pairs

MAX_LENGTH = 10

eng_prefixes = (
    "i am ", "i m ",
    "he is", "he s ",
    "she is", "she s ",
    "you are", "you re ",
    "we are", "we re ",
    "they are", "they re "
)


def filterPair(p):
    return len(p[0].split(' ')) < MAX_LENGTH and \
        len(p[1].split(' ')) < MAX_LENGTH and \
        p[0].startswith(eng_prefixes)


def filterPairs(pairs):
    return [pair for pair in pairs if filterPair(pair)]

def prepareData(lang1, lang2, reverse=False):

    # read the file and separete the data and create Lang objects
    in_lang, out_lang, pairs = getSeparetedData(lang1, lang2, reverse)
    print("Read %s sentence pairs" % len(pairs))

    pairs = filterPairs(pairs)
    print("Trimmed to %s sentence pairs" % len(pairs))

    print("Counting words...")
    for pair in pairs:
        in_lang.addSentence(pair[0])
        out_lang.addSentence(pair[1])
    print("Counted words.")
    print(in_lang.name, in_lang.n_words)
    print(out_lang.name, out_lang.n_words)

    return in_lang, out_lang, pairs

in_lang, out_lang, pairs = prepareData('DZDA', 'MSA')
print(random.choice(pairs))



# Defining the encoder class
class Encoder(nn.Module):
    def __init__(self, input_size, hidden_size):
        super(Encoder, self).__init__()
        self.hidden_size = hidden_size

        self.embedding = nn.Embedding(input_size, hidden_size)
        self.gru = nn.GRU(hidden_size, hidden_size)


    def forward(self, input, hidden):
        # reshape embedding vector as batch size=1, sequence length=1 and embedding size=embedding_size 
        embedded = self.embedding(input)
        # print("ENCODER: ")
        # print(embedded.shape)
        # the GRU layer that comes next expects an input of size [sequence_length, batch_size, input_size]
        output = embedded.view(1, 1, -1)
        
        # print(output.shape, hidden.shape)
        # print(input.shape)
        # print(input)

        output, hidden = self.gru(output, hidden)
        return output, hidden

    def initHidden(self):
        return torch.zeros(1, 1, self.hidden_size, device=device)

# Defining the Decoder class
class Decoder(nn.Module):
    def __init__(self, hidden_size, output_size):
        super(Decoder, self).__init__()
        self.hidden_size = hidden_size

        self.embedding = nn.Embedding(output_size, hidden_size)
        self.gru = nn.GRU(hidden_size, hidden_size)
        self.out = nn.Linear(hidden_size, output_size)
        self.softmax = nn.LogSoftmax(dim=1)


    def forward(self, input, hidden):
        # reshape embedding vector as batch size=1, sequence length=1 and embedding size=embedding_size 
        embedded = self.embedding(input).view(1, 1, -1)
        output = F.relu(embedded)
        output, hidden = self.gru(output, hidden)
        output = self.softmax(self.out(output[0]))
        return output, hidden

    def initHidden(self):
        return torch.zeros(1, 1, self.hidden_size, device=device)

# Attention class

class AttnDecoderRNN(nn.Module):
    def __init__(self, hidden_size, output_size, dropout_p=0.1, max_length=MAX_LENGTH):
        super(AttnDecoderRNN, self).__init__()
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.dropout_p = dropout_p
        self.max_length = max_length

        self.embedding = nn.Embedding(self.output_size, self.hidden_size)
        self.attn = nn.Linear(self.hidden_size * 2, self.max_length)
        self.attn_combine = nn.Linear(self.hidden_size * 2, self.hidden_size)
        self.dropout = nn.Dropout(self.dropout_p)
        self.gru = nn.GRU(self.hidden_size, self.hidden_size)
        self.out = nn.Linear(self.hidden_size, self.output_size)

    def forward(self, input, hidden, encoder_outputs):
        embedded = self.embedding(input).view(1, 1, -1)
        embedded = self.dropout(embedded)

        attn_weights = F.softmax(
            self.attn(torch.cat((embedded[0], hidden[0]), 1)), dim=1)
        attn_applied = torch.bmm(attn_weights.unsqueeze(0),
                                 encoder_outputs.unsqueeze(0))

        output = torch.cat((embedded[0], attn_applied[0]), 1)
        output = self.attn_combine(output).unsqueeze(0)

        output = F.relu(output)
        output, hidden = self.gru(output, hidden)

        output = F.log_softmax(self.out(output[0]), dim=1)
        return output, hidden, attn_weights

    def initHidden(self):
        return torch.zeros(1, 1, self.hidden_size, device=device)

def indexesFromSentence(lang, sentence):
    return [lang.word2index[word] for word in sentence.split(" ")]

def tensorFromSentence(lang, sentence):
    indexes = indexesFromSentence(lang, sentence)
    indexes.append(EOS_token)
    return torch.tensor(indexes, dtype=torch.long, device=device).view(-1, 1)

def tensorsFromPairs(pair):
    in_tensor = tensorFromSentence(in_lang, pair[0])
    out_tensor = tensorFromSentence(out_lang, pair[1])
    return (in_tensor, out_tensor)

# define the train function

teacher_forcing_ratio = 0.5

def train(in_tensor, target_tensor, encoder, decoder, encoder_optimizer, decoder_optimizer, criterion, max_length=MAX_LENGTH):
    encoder_hidden = encoder.initHidden()
    
    encoder_optimizer.zero_grad()
    decoder_optimizer.zero_grad()

    in_length = in_tensor.size(0)
    target_length = target_tensor.size(0)
    # print("in_length, target_length", in_length, target_length)

    encoder_outputs = torch.zeros(max_length, encoder.hidden_size, device=device)

    loss = 0
    
    for i in range(in_length):
        # print(in_tensor[i].shape, encoder_hidden.shape)
        encoder_output, encoder_hidden = encoder(in_tensor[i], encoder_hidden)
        encoder_outputs[i] = encoder_output[0, 0]

    decoder_input = torch.tensor([[SOS_token]], device=device)

    decoder_hidden = encoder_hidden

    use_teacher_forcing = True if random.random() < teacher_forcing_ratio else False

    if use_teacher_forcing:
        for i in range(target_length):
            decoder_output, decoder_hidden, decoder_attention = decoder(
                decoder_input, decoder_hidden, encoder_outputs)
            loss += criterion(decoder_output, target_tensor[i])
            decoder_input = target_tensor[i]    #teacher forcing

    else:
        for i in range(target_length):
            decoder_output, decoder_hidden, decoder_attention = decoder(
                decoder_input, decoder_hidden, encoder_outputs)
            
            topv, topi = decoder_output.topk(1)
            decoder_input = topi.squeeze().detach()  #detach from history as input     

            loss += criterion(decoder_output, target_tensor[i])
            if decoder_input.item() == EOS_token:
                break
    loss.backward()

    encoder_optimizer.step()
    decoder_optimizer.step()

    return loss.item()/target_length

# Helper function to keep tarck of time

import time
import math


def asMinutes(s):
    m = math.floor(s / 60)
    s -= m * 60
    return '%dm %ds' % (m, s)


def timeSince(since, percent):
    now = time.time()
    s = now - since
    es = s / (percent)
    rs = es - s
    return '%s (- %s)' % (asMinutes(s), asMinutes(rs))

def trainIters(encoder, decoder, n_iters, print_every=1000, plot_every=100, learning_rate=0.01):
    start = time.time()
    plot_losses = []
    print_loss_total = 0  # Reset every print_every
    plot_loss_total = 0  # Reset every plot_every

    encoder_optimizer = optim.SGD(encoder.parameters(), lr=learning_rate)
    decoder_optimizer = optim.SGD(decoder.parameters(), lr=learning_rate)
    training_pairs = [tensorsFromPairs(random.choice(pairs))
                      for i in range(n_iters)]
    criterion = nn.NLLLoss()

    for iter in range(1, n_iters + 1):
        training_pair = training_pairs[iter - 1]
        input_tensor = training_pair[0]
        target_tensor = training_pair[1]

        loss = train(input_tensor, target_tensor, encoder,
                     decoder, encoder_optimizer, decoder_optimizer, criterion)
        print_loss_total += loss
        plot_loss_total += loss

        if iter % print_every == 0:
            print_loss_avg = print_loss_total / print_every
            print_loss_total = 0
            print('%s (%d %d%%) %.4f' % (timeSince(start, iter / n_iters),
                                         iter, iter / n_iters * 100, print_loss_avg))

        if iter % plot_every == 0:
            plot_loss_avg = plot_loss_total / plot_every
            plot_losses.append(plot_loss_avg)
            plot_loss_total = 0

    showPlot(plot_losses)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
plt.switch_backend('agg')
import matplotlib.ticker as ticker
import numpy as np


def showPlot(points):
    plt.figure()
    fig, ax = plt.subplots()
    # this locator puts ticks at regular intervals
    loc = ticker.MultipleLocator(base=0.2)
    ax.yaxis.set_major_locator(loc)
    plt.plot(points)
    plt.show()

# in_lang.word2index

hidden_size = 256
encoder1 = Encoder(in_lang.n_words, hidden_size).to(device)
decoder1 = AttnDecoderRNN(hidden_size, out_lang.n_words, dropout_p=0.1).to(device)

trainIters(encoder1, decoder1, 125000, print_every=5000)

def evaluate(encoder, decoder, sentence, max_length=MAX_LENGTH):
    with torch.no_grad():
        input_tensor = tensorFromSentence(in_lang, sentence)
        input_length = input_tensor.size()[0]
        encoder_hidden = encoder.initHidden()

        encoder_outputs = torch.zeros(max_length, encoder.hidden_size, device=device)

        for ei in range(input_length):
            encoder_output, encoder_hidden = encoder(input_tensor[ei],
                                                     encoder_hidden)
            encoder_outputs[ei] += encoder_output[0, 0]

        decoder_input = torch.tensor([[SOS_token]], device=device)  # SOS

        decoder_hidden = encoder_hidden

        decoded_words = []
        decoder_attentions = torch.zeros(max_length, max_length)

        for di in range(max_length):
            decoder_output, decoder_hidden, decoder_attention = decoder(
                decoder_input, decoder_hidden, encoder_outputs)
            decoder_attentions[di] = decoder_attention.data
            topv, topi = decoder_output.data.topk(1)
            if topi.item() == EOS_token:
                decoded_words.append('<EOS>')
                break
            else:
                decoded_words.append(out_lang.index2word[topi.item()])

            decoder_input = topi.squeeze().detach()

        return decoded_words

def evaluateRandomly(encoder, decoder, n=1000):
    # calculate the bleu score
    # gold_sents is a list of lists because every gold sentence may have multiple translations 
    gold_sents = []
    # pred_sents in a list
    pred_sents = []

    for i in range(n):
        pair = random.choice(pairs)
        output_words = evaluate(encoder, decoder, pair[0])
        gold_sents.append([pair[1]])

        output_sentence = ' '.join(output_words)
        pred_sents.append(output_sentence)

    bleu_score = sacre_bleu_score(pred_sents, gold_sents)
    print("BLEU Score = ", bleu_score, end='\n\n')

    for i in range(10):
        pair = random.choice(pairs)
        print('>', pair[0])
        print('=', pair[1])
        output_words = evaluate(encoder, decoder, pair[0])
        output_sentence = ' '.join(output_words)
        print('<', output_sentence)
        print('')

evaluateRandomly(encoder1, decoder1, 5000)

# define file paths to save and load the models
encoder_path = 'NMTencoder.pth'
decoder_path = 'NMTdecoder_Att.pth'

# save the encoder1 model
torch.save(encoder1.state_dict(), encoder_path)

# save the decoder1 model
torch.save(decoder1.state_dict(), decoder_path)

# load the saved models
# loaded_encoder = Encoder(in_lang.n_words, hidden_size).to(device)
# loaded_encoder.load_state_dict(torch.load(encoder_path))

# loaded_decoder = AttnDecoderRNN(hidden_size, out_lang.n_words, dropout_p=0.1).to(device)
# loaded_decoder.load_state_dict(torch.load(decoder_path))

from google.colab import drive
drive.mount('/content/drive')

# model_weights_path = '/content/drive/My Drive/NMT_Weights/my_model_weights.pt'
# torch.save(model.state_dict(), model_weights_path)


encoder_path = '/content/drive/My Drive/NMT_Weights/New_NMT_EngToGer_encoder.pth'
decoder_path = '/content/drive/My Drive/NMT_Weights/New_NMT_EngToGer_decoder_Att.pth'

# save the encoder1 model
torch.save(encoder1.state_dict(), encoder_path)

# save the decoder1 model
torch.save(decoder1.state_dict(), decoder_path)

